========================================================
A short note about output hits from ``flsimulate``
========================================================

:author: F.Mauger
:date: 2022-05-24

Configuration files
========================
       
* Configuration directory: ``{Falaise}/resources/snemo/demonstrator/geant4_control``
* Main configuration file for ``flsimulate`` : ``Geant4Manager.conf``

 
Details about output hits, to be considered in section ``[name="detector_construction"]`` :

* the  ``sensitive.definitions`` property  lists the  definition files
  for sensitive detectors (instrumentation) :

  - scintillator blocks in optimal modules
    of main calo walls (``"calorimeter_SD"``), xcalo walls (``"xcalorimeter_SD"``), gamma veto (``"gveto_SD"``)
  - gas volume of tracker cells  (``"tracker_SD"``).

  These sensitive detectors  are *official* ones and  addressed by the
  geometry  manager through  some dedicated  properties.

  **Example:**  The  ``sensitive/calorimeter.conf``  file contains  the  set  of
  parameters  which configure  the extraction  of physics  information
  from  Geant4  truth  hit  in  the main  calo  block,  known  as  the
  ``"calorimeter_SD"`` sensitive detector.  It is better not to change
  anything here.

* The ``hit_processor_factory.configs`` property  lists the definition
  files where  post-processing is done  on truth hits produced  by the
  sensitive  detectors  described above.   Hit
  post-processing  is a  mechanism which  uses the  G4 raw  truth hits
  registered in sensitive detectors  and operates some transformations
  to build  and publish a  final set  of hits to  be used as  the main
  output of ``flsimulate`` : the famous ``SD`` bank !

  The  ``hit_processing/step_hit_processors-no_visu_tracks.conf`` file
  defines several hit post-processors  for the standard physics output
  of ``flsimulate``:

  - ``calorimeter.hit_processor``,  ``xcalorimeter.hit_processor`` and
    ``gveto.hit_processor``   are   respectively  dedicated   to   the
    processing  of  truth  hits   from  scintillator  block  (see  the
    sensitive detectors mentionned above).   They build specific final
    calorimeter hits and  store them in special collections  of hits :
    ``"calo"``, ``"xcalo"`` and, ``"gveto"``
  - ``gg.hit_processor``   is   dedicated   to   the   processing   of
    ``"tracker_SD"`` truth  hits and produces the  ``"gg"`` collection
    of hits.

  The  interest of  this  technique  is to  build  special hits  which
  reflects the minimal information needed to describe the behaviour of
  the instrumentation.   We don't store all  informations generated by
  the Geant4 engine  (see ``G4Step`` and ``G4Hit``  classes), but only
  what is useful to describe SuperNEMO  physics. We can thus achieve a
  rather good  level of reduction of  the output data volume.  This is
  suitable for massive production of Monte Carlo data.

  However,  in  some circumstances  we  may  find frustrating  not  to
  benefit  of more  detailed truth  informations.  That's  why it  is
  possible to  activate the storage of  truth hits with a  rich set of
  informations that we  may find useful. This is done  by activating a
  special    hit     processor,    as     an    instance     of    the
  ``mctools::push_all_step_hit_processor``   class.   This   processor
  simply reads the hits from a  collection of truth hits and push them
  all, without  data reduction or  loss, in some output  hit category.
  The   final    hit   collection    in   ``flsimulate``    is   named
  ``"__visu.tracks"``. Of course  this has a price in  term of storage
  and I/O  access because we expect  to collect a huge  amount of such
  truth hits, each of them  containing a lot of information, depending
  on what has been requested by the user.

  This ``"__visu.tracks"``  mechanism can be activated  for any volume
  (or  collection of  volumes) in  the detector,  even if  it was  not
  declared as  official sensitive detector  in the geometry  model. It
  means that  any user can  tweak the ``flsimulate``  configuration in
  order  to  activate a  new  truth  hit  processor and  obtain  truth
  informations of interest.
  The place to be here is the ``hit_processing/step_hit_processors-only_visu_tracks.conf`` file
  where such hit post-processors are already defined and maybe activated by specific
  *output profiles* (this depends on a ``variant`` option).

  
Extract from ``hit_processing/step_hit_processors-only_visu_tracks.conf`` :

.. code::

    ...
    
    [name="source.visu.hit_processor" type="mctools::push_all_step_hit_processor"]

    sensitive.category : string  = "__source_SD"
    hit.category       : string  = "__visu.tracks"
    
    #@variant_if geometry:layout/if_basic/source_layout/if_basic|true  # <-- only if Basic variant is selected
    geometry.volumes.with_materials : string[1] = "bb_source_material.basic"
    geometry.volumes.names   : string[6] = \
      "source_external_film.basic.model.log" \
      "source_internal_film.basic.model.log" \
      "source_external_multipad.basic.model.log" \
      "source_internal_multipad.basic.model.log" \
      "source_internal_strip.basic.model.log" \
      "source_external_strip.basic.model.log"
    #@variant_endif geometry:layout/if_basic/source_layout/if_basic

    ...

    # Here we activate the recording of some truth informations available from G4 step hits
    sensitive.record_momentum                  : boolean = 1
    sensitive.record_track_id                  : boolean = 1
    sensitive.record_sensitive_category        : boolean = 1
    sensitive.record_material                  : boolean = 1
    sensitive.record_creator_process           : boolean = 1
    sensitive.record_boundaries                : boolean = 1
    sensitive.record_primary_particle          : boolean = 1
    
    output_profiles.matching : string[2] = "source_details" "all_details"

..

It may be interesting to also add the following property:

.. code::

    sensitive.record_kinetic_energy            : boolean = 1
..

Example for a study of the energy of beta exiting the source foil
=========================================================================

**Context:** Will's demand (2022-05-23)


Example  of  ``flsimuLate``'s variant  profile  that  would allow  to
analyze the energy of DBD electrons when exiting the foil:

- the basic source foil geometry is  selected and its thickness is set
  to  some arbitrary  value of  interest. This  is needed  because the
  realistic model of the source foil does not allow to tune the source
  thickness.
- the bulk vertex generator is selected from source pads.
- the neutrinoless DBD of Se82 is selected.
- the simulation  output profile  ``"source_details"`` is  selected to
  activate  the recording  of detailed  truth hits  generated in  the
  source region.  The ``__visu.tracks``  hit collection will  exist in
  the ``SD`` bank and should contains such hits.


**Warning:** Comments starting with ``# <--`` are not part of the syntax.

.. code::
   
    #@format=datatools::configuration::variant
    #@format.version=1.0
    #@organization=snemo
    #@application=falaise

    [registry="geometry"]
    layout = "Basic"
    layout/if_basic/magnetic_field = true
    layout/if_basic/magnetic_field/is_active/type = "UniformVertical"
    layout/if_basic/magnetic_field/is_active/type/if_uniform_vertical/magnitude = 25 gauss
    layout/if_basic/magnetic_field/is_active/type/if_uniform_vertical/direction = "+z"
    layout/if_basic/source_layout = "Basic" # <-- the basic flat source foil
    layout/if_basic/source_layout/if_basic/thickness = 250 um  # <-- the adjustable thickness of the foil
    layout/if_basic/source_layout/if_basic/material = "Se82" # <-- The DBD material
    layout/if_basic/source_calibration = false
    layout/if_basic/shielding = true
    calo_film_thickness = 25 um

    [registry="vertexes"]
    generator = "source_pads_bulk"  # <-- the generation of vertices

    [registry="primary_events"]
    generator = "Se82.0nubb"       # <-- the decay process

    [registry="simulation"]
    physics_mode = "Constructors"
    physics_mode/if_constructors/em_model = "standard"
    production_cuts = true
    output_profile = "source_details" # <-- the production of truth hits in SD output 

..


The  truth hits  extracted from  the ``__visu.tracks``  hit collection
found  in  the  ``SD``  bank  can be  analyzed  with  respect  to  the
definition  of the  ``mctools::base_step_hit`` class  in Bayeux.   See
https://github.com/BxCppDev/Bayeux/blob/develop/source/bxmctools/include/mctools/base_step_hit.h
for  description   of  available   attributes  and   accessor  methods
(``is_leaving_volume``, ``get_kinetic_energy_stop`` ...).

Conclusion
==========

If you plan to do a specific analysis based on truth hit informations,
you must ack some of the  ``flsimulate`` configuration files in such a
way you activate special features implemented in Bayeux/Falaise.

You will be able then to use a dedicated program that will read the SD
bank  from  the output  file,  search  for the  ``__visu.tracks``  hit
collection and traverse it to extract the hits of interest, using some
criteria like: name of the *sensitive category*, name of the particle,
name  of  the  material,  *primary particle*  flag,  *leaving  volume*
flag...


.. 
